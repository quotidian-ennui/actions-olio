name: dependabot-merge
description: |
  Merge PRs raised by dependabot that match a filter and have a semver level matching the
  automerge level. Has an implicit relationship to pr-trigger since it tries to use client_payload from
  a repository dispatch event.
inputs:
  token:
    description: The github token to use when committing changes
    required: false
    default: ${{ github.token }}
  change_filter:
    description: |
      The filter to use finding source file changes.
    required: false
    default: ".github/workflows/**"
  filter_separator:
    description: |
      The separator to use when splitting the change_filter.
    required: false
    default: "\n"
  automerge_level:
    description: |
      The semver level to allow automerge up to (default semver-patch|semver-minor).
    required: false
    default: "semver-patch|semver-minor"
  merge_commentary:
    description: |
      Additional context to add to generated comments. (defaults to blank)
    required: false
    default: ""
  merge_max_attempts:
    description: |
      Max Merge Attempts (default 2)
    required: false
    default: "2"
  merge_retry_wait_seconds:
    description: |
      Wait between each retry (default 60s)
    required: false
    default: "60"
  merge_timeout_seconds:
    description: |
      Timeout (default 60s)
    required: false
    default: "60"
  merge_flags:
    description: |
      additional merge_flags (e.g. --auto)
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Changes
      id: changes
      uses: tj-actions/changed-files@c3a1bb2c992d77180ae65be6ae6c166cf40f857c # v45.0.3
      with:
        files: ${{ inputs.change_filter }}
        files_separator: ${{ inputs.filter_separator }}
    - name: Prepare
      id: bootstrap
      shell: bash
      run: |
        function is_dependabot_pr() {
          if [[ "${{ github.event.client_payload.detail.pull_request }}" != "" \
            && "${{ github.event.client_payload.base.actor }}" == "dependabot[bot]" \
            && "${{ github.event.client_payload.base.ref }}" == dependabot* ]]
          then
            return 0
          else
            return 1
          fi
        }
        function mergeable() {
          if is_dependabot_pr; then
            if [[ "${{ steps.changes.outputs.any_changed }}" != "true" ]]
            then
              return 1
            fi
            local update_type=${1/version-update:/}
            case "$update_type" in
            ${{ inputs.automerge_level }}) return 0;;
            *) return 1;;
            esac
          else
            return 1
          fi
        }

        if is_dependabot_pr; then
          echo "is_dependabot_pr=true"  >> "$GITHUB_OUTPUT"
        else
          echo "is_dependabot_pr=false"  >> "$GITHUB_OUTPUT"
        fi

        if mergeable "${{ github.event.client_payload.detail.dependabot_update_type }}"
        then
          echo "automerge=true" >> "$GITHUB_OUTPUT"
        else
          echo "automerge=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Generate Summary
      id: summary
      shell: bash
      run: |
        function largest_semver() {
          case "${{ inputs.automerge_level }}" in
            *semver-major*) echo "semver-major";;
            *semver-minor*) echo "semver-minor";;
            *) echo "semver-patch";;
          esac
        }
        summary_body_file=$(mktemp --tmpdir="$RUNNER_TEMP" "summary-comment-XXXXXXXX")
        {
          if [[ "${{ inputs.merge_commentary }}" != "" ]]
          then
            echo "${{ inputs.merge_commentary }}"
            echo ""
          fi
          echo ":dependabot: Attempt Merge: ${{ steps.bootstrap.outputs.automerge }}"
          echo ""
          echo "| Decision Table | Value |";
          echo "| ------ | ------ |"
          echo "|job_id| ${{ github.job }} |"
          echo "|is_dependabot| ${{ steps.bootstrap.outputs.is_dependabot_pr }} |";
          echo "|automerge (up to)| $(largest_semver) |"
          echo "|update_type| $(echo ${{ github.event.client_payload.detail.dependabot_update_type }} | sed -e "s/^version-update://") |";
          echo "|change_filter| \`${{ inputs.change_filter }}\` |";
          echo "|has_changes | ${{ steps.changes.outputs.any_changed  }} |";
        } > "$summary_body_file"
        cat $summary_body_file >> "$GITHUB_STEP_SUMMARY"
        echo "summary_body_file=$summary_body_file" >> "$GITHUB_OUTPUT"
    - name: Update PR
      id: comment
      uses: quotidian-ennui/actions-olio/pr-or-issue-comment@main
      if: |
        steps.bootstrap.outputs.is_dependabot_pr == 'true'
      with:
        issue_number: ${{ github.event.client_payload.detail.pull_request }}
        body_path: ${{ steps.summary.outputs.summary_body_file }}
        token: ${{ inputs.token }}
        search_term: "dependabot-automerge-status ${{ inputs.change_filter }}"
    - name: Merge
      uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e # v3.0.0
      id: merge
      if: |
        steps.bootstrap.outputs.automerge == 'true'
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        shell: bash
        max_attempts: ${{ inputs.merge_max_attempts }}
        retry_wait_seconds: ${{ inputs.merge_retry_wait_seconds }}
        timeout_seconds: ${{ inputs.merge_timeout_seconds }}
        retry_on: error
        command: |
          gh pr review --approve "${{ github.event.client_payload.detail.pull_request }}"
          gh pr merge -s "${{ github.event.client_payload.detail.pull_request }}" ${{ inputs.merge_flags }}
    - name: PR Result Comment
      id: merge_result
      if: |
        (success() || failure()) &&
        steps.bootstrap.outputs.automerge == 'true'
      shell: bash
      run: |
        eof=$(head -c15 /dev/urandom | base64)
        {
          printf "comment<<%s\n" "${eof}";
          if [[ "${{ inputs.merge_commentary }}" != "" ]]
          then
            echo "${{ inputs.merge_commentary }}"
            echo ""
          fi
          if [[ "${{ steps.merge.outcome }}" == "success" ]]
          then
            echo ":dependabot: Merge Success :thumbsup:"
          else
            echo ":dependabot: Merge Failed :cry:"
            echo ""
            echo "Attempted to merge ${{ steps.merge.outputs.total_attempts}} time(s) but failed."
            echo ""
            echo "The final exit code from the step was ${{ steps.merge.outputs.exit_code }}."
            echo "${{ steps.merge.outputs.exit_error }}"
          fi
          printf "%s\n" "${eof}";
        } >> "$GITHUB_OUTPUT"
    - name: Update PR
      id: report
      if: |
        (success() || failure()) &&
        steps.bootstrap.outputs.automerge == 'true'
      uses: quotidian-ennui/actions-olio/pr-or-issue-comment@main
      with:
        issue_number: ${{ github.event.client_payload.detail.pull_request }}
        body: |
          ${{ steps.merge_result.outputs.comment }}
        token: ${{ inputs.token }}
        search_term: "dependabot-automerge-result ${{ inputs.change_filter }}"
